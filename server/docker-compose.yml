version: '3.5'
# 网络配置
networks:
  shop_server:
    driver: bridge

# 服务容器配置
services:
  etcd: # 自定义容器名称
    build:
      context: ./docker-file/etcd                    # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=Asia/Shanghai
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports: # 设置端口映射
      - "2379:2379"
    networks:
      - shop_server
  #    restart: always

  prometheus:
    build:
      context: ./docker-file/prometheus
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    volumes:
      - ./docker-file/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "9090:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - shop_server
  #    restart: always

  grafana:
    build:
      context: ./docker-file/grafana
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    ports:
      - "3000:3000"
    networks:
      - shop_server
  #    restart: always

  jaeger:
    build:
      context: ./docker-file/jaeger
    environment:
      - TZ=Asia/Shanghai
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    privileged: true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - shop_server
#    restart: always




  etcd-manage:
    build:
      context: ./docker-file/etcd-manage
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "7000:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - shop_server
  #    restart: always

  user-rpc: # 自定义容器名称
    build:
      context: ./                 # 指定构建使用的 Dockerfile 文件
      dockerfile: app/user/cmd/rpc/Dockerfile
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    ports: # 设置端口映射
      - "9991:9991"  # 课件服务rpc端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - shop_server
  #    restart: always                      # 指定容器退出后的重启策略为始终重启

  user-api: # 自定义容器名称
    build:
      context: ./                 # 指定构建使用的 Dockerfile 文件
      dockerfile: app/user/cmd/api/Dockerfile
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    ports: # 设置端口映射
      - "9990:9990"  # 课件服务rpc端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - shop_server
#    restart: always                      # 指定容器退出后的重启策略为始终重启


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    volumes:
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
#    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - shop_server


  #查看elasticsearch数据 - Kibana to view Elasticsearch data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=Asia/Shanghai
#    restart: always
    networks:
      - shop_server
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  go-stash:
    image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
    #    image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
    container_name: go-stash
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
#    restart: always
    volumes:
      - ./deploy/go-stash/etc:/app/etc
    networks:
      - shop_server
    depends_on:
      - elasticsearch
      - kafka

  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
#    restart: always
    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题 - Solving the configuration file permissions
    volumes:
      - ./deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - shop_server
    depends_on:
      - kafka


  #zookeeper是kafka的依赖 - Zookeeper is the dependencies of Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
#    restart: always
    ports:
      - 2181:2181
    networks:
      - shop_server

  #消息队列 - Message queue
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - TZ=Asia/Shanghai
#    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - shop_server
    depends_on:
      - zookeeper
