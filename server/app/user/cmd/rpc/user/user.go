// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"server/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminChangeRoleReq      = pb.AdminChangeRoleReq
	Business                = pb.Business
	BusinessChangeStatusReq = pb.BusinessChangeStatusReq
	BusinessCreateReq       = pb.BusinessCreateReq
	BusinessPageReply       = pb.BusinessPageReply
	IDReq                   = pb.IDReq
	IDsReq                  = pb.IDsReq
	PageReply               = pb.PageReply
	PageReq                 = pb.PageReq
	UUIDReq                 = pb.UUIDReq
	UserChangeStatusReq     = pb.UserChangeStatusReq
	UserCreateReq           = pb.UserCreateReq
	UserInfoReply           = pb.UserInfoReply
	UserLoginReply          = pb.UserLoginReply
	UserLoginReq            = pb.UserLoginReq
	UserNil                 = pb.UserNil
	UserReply               = pb.UserReply
	UserUpdateReq           = pb.UserUpdateReq
	UsernameReq             = pb.UsernameReq

	User interface {
		// 用户相关
		UserFind(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserFindByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageReply, error)
		UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserNil, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserNil, error)
		UserDelete(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserNil, error)
		UserBatchDelete(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*UserNil, error)
		Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginReply, error)
		UserFindByUUID(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		AdminChangeRole(ctx context.Context, in *AdminChangeRoleReq, opts ...grpc.CallOption) (*UserNil, error)
		UserChangeStatus(ctx context.Context, in *UserChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error)
		// 商家相关
		BusinessCreate(ctx context.Context, in *BusinessCreateReq, opts ...grpc.CallOption) (*UserNil, error)
		BusinessList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*BusinessPageReply, error)
		BusinessChangeStatus(ctx context.Context, in *BusinessChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户相关
func (m *defaultUser) UserFind(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFind(ctx, in, opts...)
}

func (m *defaultUser) UserFindByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByUsername(ctx, in, opts...)
}

func (m *defaultUser) UserList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUser) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultUser) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultUser) UserDelete(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

func (m *defaultUser) UserBatchDelete(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserBatchDelete(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserFindByUUID(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByUUID(ctx, in, opts...)
}

func (m *defaultUser) AdminChangeRole(ctx context.Context, in *AdminChangeRoleReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AdminChangeRole(ctx, in, opts...)
}

func (m *defaultUser) UserChangeStatus(ctx context.Context, in *UserChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserChangeStatus(ctx, in, opts...)
}

// 商家相关
func (m *defaultUser) BusinessCreate(ctx context.Context, in *BusinessCreateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessCreate(ctx, in, opts...)
}

func (m *defaultUser) BusinessList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*BusinessPageReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessList(ctx, in, opts...)
}

func (m *defaultUser) BusinessChangeStatus(ctx context.Context, in *BusinessChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessChangeStatus(ctx, in, opts...)
}
