// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"server/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminChangeRoleReq           = pb.AdminChangeRoleReq
	Business                     = pb.Business
	BusinessChangeStatusReq      = pb.BusinessChangeStatusReq
	BusinessCreateReq            = pb.BusinessCreateReq
	BusinessDict                 = pb.BusinessDict
	BusinessDictReply            = pb.BusinessDictReply
	BusinessFindListReq          = pb.BusinessFindListReq
	BusinessIDReq                = pb.BusinessIDReq
	BusinessListReply            = pb.BusinessListReply
	BusinessPageReply            = pb.BusinessPageReply
	BusinessUUIDReq              = pb.BusinessUUIDReq
	IDReq                        = pb.IDReq
	IDsReq                       = pb.IDsReq
	PageReply                    = pb.PageReply
	PageReq                      = pb.PageReq
	PhoneReq                     = pb.PhoneReq
	UUIDReq                      = pb.UUIDReq
	UserChangeStatusReq          = pb.UserChangeStatusReq
	UserCreateReq                = pb.UserCreateReq
	UserFindByPhoneOrUsernameReq = pb.UserFindByPhoneOrUsernameReq
	UserInfoReply                = pb.UserInfoReply
	UserListReply                = pb.UserListReply
	UserLoginReply               = pb.UserLoginReply
	UserLoginReq                 = pb.UserLoginReq
	UserNil                      = pb.UserNil
	UserPageListByIDsReq         = pb.UserPageListByIDsReq
	UserReply                    = pb.UserReply
	UserUpdateByUUIDReq          = pb.UserUpdateByUUIDReq
	UserUpdateReq                = pb.UserUpdateReq
	UsernameReq                  = pb.UsernameReq

	User interface {
		// 用户相关
		UserFind(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserFindByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageReply, error)
		UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserNil, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserNil, error)
		UserDelete(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserNil, error)
		UserBatchDelete(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*UserNil, error)
		Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginReply, error)
		UserFindByUUID(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		AdminChangeRole(ctx context.Context, in *AdminChangeRoleReq, opts ...grpc.CallOption) (*UserNil, error)
		UserChangeStatus(ctx context.Context, in *UserChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error)
		UserFindByPhoneOrUsername(ctx context.Context, in *UserFindByPhoneOrUsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserCheckPhone(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserNil, error)
		UserFindByPhone(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		UserUpdateByUUID(ctx context.Context, in *UserUpdateByUUIDReq, opts ...grpc.CallOption) (*UserNil, error)
		UserFindListByIDs(ctx context.Context, in *UserPageListByIDsReq, opts ...grpc.CallOption) (*UserListReply, error)
		// 商家相关
		BusinessCreate(ctx context.Context, in *BusinessCreateReq, opts ...grpc.CallOption) (*UserNil, error)
		BusinessList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*BusinessPageReply, error)
		BusinessChangeStatus(ctx context.Context, in *BusinessChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error)
		BusinessFind(ctx context.Context, in *BusinessIDReq, opts ...grpc.CallOption) (*Business, error)
		BusinessFindByUUID(ctx context.Context, in *BusinessUUIDReq, opts ...grpc.CallOption) (*Business, error)
		BusinessUpdate(ctx context.Context, in *Business, opts ...grpc.CallOption) (*UserNil, error)
		BusinessFindListByIDs(ctx context.Context, in *BusinessFindListReq, opts ...grpc.CallOption) (*BusinessListReply, error)
		BusinessDict(ctx context.Context, in *UserNil, opts ...grpc.CallOption) (*BusinessDictReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户相关
func (m *defaultUser) UserFind(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFind(ctx, in, opts...)
}

func (m *defaultUser) UserFindByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByUsername(ctx, in, opts...)
}

func (m *defaultUser) UserList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUser) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultUser) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultUser) UserDelete(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

func (m *defaultUser) UserBatchDelete(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserBatchDelete(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserFindByUUID(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByUUID(ctx, in, opts...)
}

func (m *defaultUser) AdminChangeRole(ctx context.Context, in *AdminChangeRoleReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AdminChangeRole(ctx, in, opts...)
}

func (m *defaultUser) UserChangeStatus(ctx context.Context, in *UserChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserChangeStatus(ctx, in, opts...)
}

func (m *defaultUser) UserFindByPhoneOrUsername(ctx context.Context, in *UserFindByPhoneOrUsernameReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByPhoneOrUsername(ctx, in, opts...)
}

func (m *defaultUser) UserCheckPhone(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserCheckPhone(ctx, in, opts...)
}

func (m *defaultUser) UserFindByPhone(ctx context.Context, in *PhoneReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindByPhone(ctx, in, opts...)
}

func (m *defaultUser) UserUpdateByUUID(ctx context.Context, in *UserUpdateByUUIDReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserUpdateByUUID(ctx, in, opts...)
}

func (m *defaultUser) UserFindListByIDs(ctx context.Context, in *UserPageListByIDsReq, opts ...grpc.CallOption) (*UserListReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserFindListByIDs(ctx, in, opts...)
}

// 商家相关
func (m *defaultUser) BusinessCreate(ctx context.Context, in *BusinessCreateReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessCreate(ctx, in, opts...)
}

func (m *defaultUser) BusinessList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*BusinessPageReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessList(ctx, in, opts...)
}

func (m *defaultUser) BusinessChangeStatus(ctx context.Context, in *BusinessChangeStatusReq, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessChangeStatus(ctx, in, opts...)
}

func (m *defaultUser) BusinessFind(ctx context.Context, in *BusinessIDReq, opts ...grpc.CallOption) (*Business, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessFind(ctx, in, opts...)
}

func (m *defaultUser) BusinessFindByUUID(ctx context.Context, in *BusinessUUIDReq, opts ...grpc.CallOption) (*Business, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessFindByUUID(ctx, in, opts...)
}

func (m *defaultUser) BusinessUpdate(ctx context.Context, in *Business, opts ...grpc.CallOption) (*UserNil, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessUpdate(ctx, in, opts...)
}

func (m *defaultUser) BusinessFindListByIDs(ctx context.Context, in *BusinessFindListReq, opts ...grpc.CallOption) (*BusinessListReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessFindListByIDs(ctx, in, opts...)
}

func (m *defaultUser) BusinessDict(ctx context.Context, in *UserNil, opts ...grpc.CallOption) (*BusinessDictReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BusinessDict(ctx, in, opts...)
}
