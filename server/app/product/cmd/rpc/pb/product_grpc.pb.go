// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// @desc 所有的分类列表
	CategoryListAll(ctx context.Context, in *ProductNil, opts ...grpc.CallOption) (*CategoryListAllReply, error)
	// @desc 分类创建
	CategoryCreate(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*ProductNil, error)
	// @desc 修改分类状态
	CategoryChangeStatus(ctx context.Context, in *CategoryChangeStatusReq, opts ...grpc.CallOption) (*ProductNil, error)
	// @desc 根据 分类 id 查询分类
	CategoryFind(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*Category, error)
	// @desc 更新分类
	CategoryUpdate(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*ProductNil, error)
	// @desc 批量删除分类
	CategoryBatchDelete(ctx context.Context, in *CategoryIDSReq, opts ...grpc.CallOption) (*ProductNil, error)
	// @desc 分局父分类 id 查询子分类 id 列表
	CategoryFindChildrenID(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*CategoryIDSReply, error)
	// @desc 单个删除分类
	CategoryDelete(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*ProductNil, error)
	// 商品列表 分页
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListReply, error)
	ProductCreate(ctx context.Context, in *ProductCreateReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductNil, error)
	// @desc 下架某商家的所有商品
	ProductStaging(ctx context.Context, in *ProductStagingReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductChangeStatus(ctx context.Context, in *ProductChangeStatusReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductFind(ctx context.Context, in *ProductFindReq, opts ...grpc.CallOption) (*ProductReply, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductDeductionStock(ctx context.Context, in *ProductDeductionStockReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductAddStock(ctx context.Context, in *ProductAddStockReq, opts ...grpc.CallOption) (*ProductNil, error)
	ProductFindListByIDs(ctx context.Context, in *ProductIDsReq, opts ...grpc.CallOption) (*ProductListReply, error)
	ProductFindListByBusinessID(ctx context.Context, in *ProductFindListByBusinessIDReq, opts ...grpc.CallOption) (*ProductListReply, error)
	CategoryIDByProductList(ctx context.Context, in *CategoryIDByProductListReq, opts ...grpc.CallOption) (*CategoryIDByProductListReply, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CategoryListAll(ctx context.Context, in *ProductNil, opts ...grpc.CallOption) (*CategoryListAllReply, error) {
	out := new(CategoryListAllReply)
	err := c.cc.Invoke(ctx, "/pb.product/categoryListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryCreate(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/categoryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryChangeStatus(ctx context.Context, in *CategoryChangeStatusReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/categoryChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryFind(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/pb.product/categoryFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryUpdate(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/categoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryBatchDelete(ctx context.Context, in *CategoryIDSReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/categoryBatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryFindChildrenID(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*CategoryIDSReply, error) {
	out := new(CategoryIDSReply)
	err := c.cc.Invoke(ctx, "/pb.product/categoryFindChildrenID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryDelete(ctx context.Context, in *CategoryIDReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/categoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListReply, error) {
	out := new(ProductListReply)
	err := c.cc.Invoke(ctx, "/pb.product/productList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductCreate(ctx context.Context, in *ProductCreateReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/productCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/productDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductStaging(ctx context.Context, in *ProductStagingReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/ProductStaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductChangeStatus(ctx context.Context, in *ProductChangeStatusReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/ProductChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductFind(ctx context.Context, in *ProductFindReq, opts ...grpc.CallOption) (*ProductReply, error) {
	out := new(ProductReply)
	err := c.cc.Invoke(ctx, "/pb.product/ProductFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/ProductUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductDeductionStock(ctx context.Context, in *ProductDeductionStockReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/ProductDeductionStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductAddStock(ctx context.Context, in *ProductAddStockReq, opts ...grpc.CallOption) (*ProductNil, error) {
	out := new(ProductNil)
	err := c.cc.Invoke(ctx, "/pb.product/ProductAddStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductFindListByIDs(ctx context.Context, in *ProductIDsReq, opts ...grpc.CallOption) (*ProductListReply, error) {
	out := new(ProductListReply)
	err := c.cc.Invoke(ctx, "/pb.product/ProductFindListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductFindListByBusinessID(ctx context.Context, in *ProductFindListByBusinessIDReq, opts ...grpc.CallOption) (*ProductListReply, error) {
	out := new(ProductListReply)
	err := c.cc.Invoke(ctx, "/pb.product/ProductFindListByBusinessID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CategoryIDByProductList(ctx context.Context, in *CategoryIDByProductListReq, opts ...grpc.CallOption) (*CategoryIDByProductListReply, error) {
	out := new(CategoryIDByProductListReply)
	err := c.cc.Invoke(ctx, "/pb.product/categoryIDByProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// @desc 所有的分类列表
	CategoryListAll(context.Context, *ProductNil) (*CategoryListAllReply, error)
	// @desc 分类创建
	CategoryCreate(context.Context, *CategoryCreateReq) (*ProductNil, error)
	// @desc 修改分类状态
	CategoryChangeStatus(context.Context, *CategoryChangeStatusReq) (*ProductNil, error)
	// @desc 根据 分类 id 查询分类
	CategoryFind(context.Context, *CategoryIDReq) (*Category, error)
	// @desc 更新分类
	CategoryUpdate(context.Context, *CategoryUpdateReq) (*ProductNil, error)
	// @desc 批量删除分类
	CategoryBatchDelete(context.Context, *CategoryIDSReq) (*ProductNil, error)
	// @desc 分局父分类 id 查询子分类 id 列表
	CategoryFindChildrenID(context.Context, *CategoryIDReq) (*CategoryIDSReply, error)
	// @desc 单个删除分类
	CategoryDelete(context.Context, *CategoryIDReq) (*ProductNil, error)
	// 商品列表 分页
	ProductList(context.Context, *ProductListReq) (*ProductListReply, error)
	ProductCreate(context.Context, *ProductCreateReq) (*ProductNil, error)
	ProductDelete(context.Context, *ProductDeleteReq) (*ProductNil, error)
	// @desc 下架某商家的所有商品
	ProductStaging(context.Context, *ProductStagingReq) (*ProductNil, error)
	ProductChangeStatus(context.Context, *ProductChangeStatusReq) (*ProductNil, error)
	ProductFind(context.Context, *ProductFindReq) (*ProductReply, error)
	ProductUpdate(context.Context, *ProductUpdateReq) (*ProductNil, error)
	ProductDeductionStock(context.Context, *ProductDeductionStockReq) (*ProductNil, error)
	ProductAddStock(context.Context, *ProductAddStockReq) (*ProductNil, error)
	ProductFindListByIDs(context.Context, *ProductIDsReq) (*ProductListReply, error)
	ProductFindListByBusinessID(context.Context, *ProductFindListByBusinessIDReq) (*ProductListReply, error)
	CategoryIDByProductList(context.Context, *CategoryIDByProductListReq) (*CategoryIDByProductListReply, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CategoryListAll(context.Context, *ProductNil) (*CategoryListAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryListAll not implemented")
}
func (UnimplementedProductServer) CategoryCreate(context.Context, *CategoryCreateReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryCreate not implemented")
}
func (UnimplementedProductServer) CategoryChangeStatus(context.Context, *CategoryChangeStatusReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryChangeStatus not implemented")
}
func (UnimplementedProductServer) CategoryFind(context.Context, *CategoryIDReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryFind not implemented")
}
func (UnimplementedProductServer) CategoryUpdate(context.Context, *CategoryUpdateReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryUpdate not implemented")
}
func (UnimplementedProductServer) CategoryBatchDelete(context.Context, *CategoryIDSReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryBatchDelete not implemented")
}
func (UnimplementedProductServer) CategoryFindChildrenID(context.Context, *CategoryIDReq) (*CategoryIDSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryFindChildrenID not implemented")
}
func (UnimplementedProductServer) CategoryDelete(context.Context, *CategoryIDReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDelete not implemented")
}
func (UnimplementedProductServer) ProductList(context.Context, *ProductListReq) (*ProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServer) ProductCreate(context.Context, *ProductCreateReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCreate not implemented")
}
func (UnimplementedProductServer) ProductDelete(context.Context, *ProductDeleteReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedProductServer) ProductStaging(context.Context, *ProductStagingReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductStaging not implemented")
}
func (UnimplementedProductServer) ProductChangeStatus(context.Context, *ProductChangeStatusReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductChangeStatus not implemented")
}
func (UnimplementedProductServer) ProductFind(context.Context, *ProductFindReq) (*ProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFind not implemented")
}
func (UnimplementedProductServer) ProductUpdate(context.Context, *ProductUpdateReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedProductServer) ProductDeductionStock(context.Context, *ProductDeductionStockReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDeductionStock not implemented")
}
func (UnimplementedProductServer) ProductAddStock(context.Context, *ProductAddStockReq) (*ProductNil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAddStock not implemented")
}
func (UnimplementedProductServer) ProductFindListByIDs(context.Context, *ProductIDsReq) (*ProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFindListByIDs not implemented")
}
func (UnimplementedProductServer) ProductFindListByBusinessID(context.Context, *ProductFindListByBusinessIDReq) (*ProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFindListByBusinessID not implemented")
}
func (UnimplementedProductServer) CategoryIDByProductList(context.Context, *CategoryIDByProductListReq) (*CategoryIDByProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryIDByProductList not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CategoryListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryListAll(ctx, req.(*ProductNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryCreate(ctx, req.(*CategoryCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryChangeStatus(ctx, req.(*CategoryChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryFind(ctx, req.(*CategoryIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryUpdate(ctx, req.(*CategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryBatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryIDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryBatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryBatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryBatchDelete(ctx, req.(*CategoryIDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryFindChildrenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryFindChildrenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryFindChildrenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryFindChildrenID(ctx, req.(*CategoryIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryDelete(ctx, req.(*CategoryIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/productList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/productCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductCreate(ctx, req.(*ProductCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/productDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductDelete(ctx, req.(*ProductDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductStaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductStagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductStaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductStaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductStaging(ctx, req.(*ProductStagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductChangeStatus(ctx, req.(*ProductChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductFind(ctx, req.(*ProductFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductUpdate(ctx, req.(*ProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductDeductionStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeductionStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductDeductionStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductDeductionStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductDeductionStock(ctx, req.(*ProductDeductionStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductAddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAddStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductAddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductAddStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductAddStock(ctx, req.(*ProductAddStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductFindListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductFindListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductFindListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductFindListByIDs(ctx, req.(*ProductIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductFindListByBusinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFindListByBusinessIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductFindListByBusinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/ProductFindListByBusinessID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductFindListByBusinessID(ctx, req.(*ProductFindListByBusinessIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CategoryIDByProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryIDByProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryIDByProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.product/categoryIDByProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryIDByProductList(ctx, req.(*CategoryIDByProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "categoryListAll",
			Handler:    _Product_CategoryListAll_Handler,
		},
		{
			MethodName: "categoryCreate",
			Handler:    _Product_CategoryCreate_Handler,
		},
		{
			MethodName: "categoryChangeStatus",
			Handler:    _Product_CategoryChangeStatus_Handler,
		},
		{
			MethodName: "categoryFind",
			Handler:    _Product_CategoryFind_Handler,
		},
		{
			MethodName: "categoryUpdate",
			Handler:    _Product_CategoryUpdate_Handler,
		},
		{
			MethodName: "categoryBatchDelete",
			Handler:    _Product_CategoryBatchDelete_Handler,
		},
		{
			MethodName: "categoryFindChildrenID",
			Handler:    _Product_CategoryFindChildrenID_Handler,
		},
		{
			MethodName: "categoryDelete",
			Handler:    _Product_CategoryDelete_Handler,
		},
		{
			MethodName: "productList",
			Handler:    _Product_ProductList_Handler,
		},
		{
			MethodName: "productCreate",
			Handler:    _Product_ProductCreate_Handler,
		},
		{
			MethodName: "productDelete",
			Handler:    _Product_ProductDelete_Handler,
		},
		{
			MethodName: "ProductStaging",
			Handler:    _Product_ProductStaging_Handler,
		},
		{
			MethodName: "ProductChangeStatus",
			Handler:    _Product_ProductChangeStatus_Handler,
		},
		{
			MethodName: "ProductFind",
			Handler:    _Product_ProductFind_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _Product_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDeductionStock",
			Handler:    _Product_ProductDeductionStock_Handler,
		},
		{
			MethodName: "ProductAddStock",
			Handler:    _Product_ProductAddStock_Handler,
		},
		{
			MethodName: "ProductFindListByIDs",
			Handler:    _Product_ProductFindListByIDs_Handler,
		},
		{
			MethodName: "ProductFindListByBusinessID",
			Handler:    _Product_ProductFindListByBusinessID_Handler,
		},
		{
			MethodName: "categoryIDByProductList",
			Handler:    _Product_CategoryIDByProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
